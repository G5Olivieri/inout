openapi: 3.0.3
info:
  title: Inout API v1
  license:
    name: MIT
    url: 'https://mit-license.org/'
  version: 0.0.1
servers:
  - url: 'http://localhost:3001/api/v1'
    description: Local development server
tags:
  - name: product
  - name: tag

paths:
  /products:
    post:
      tags:
        - product
      summary: Create a new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - tags
              properties:
                name:
                  type: string
                  example: Zomo de Morango
                tags:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '201':
          description: Product created with success
          headers:
            Location:
              description: resource path of the product created
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          links:
            GetProductById:
              operationId: getProduct
              parameters:
                productId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `productId` parameter in `GET /products/{productId}`.
        '409':
          description: Product name already exists
        '400':
          description: Invalid request
        '404':
          description: Tag not found
    get:
      tags:
      - product
      summary: List products
      operationId: listProducts
      responses:
        '200':
          description: List products with success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{productId}:
    get:
      summary: Get product
      tags:
      - product
      operationId: getProduct
      parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Get product with success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - product
      summary: Update the product
      operationId: updateProduct
      parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - tags
              properties:
                name:
                  type: string
                  example: Zomo de Morango
                tags:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Product updated with success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '409':
          description: Product name already exists
        '400':
          description: Invalid request
        '404':
          description: Tag not found
    patch:
      tags:
        - product
      summary: Patch the product
      operationId: patchProduct
      parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Zomo de Morango
                tags:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Product patched with success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '409':
          description: Product name already exists
        '404':
          description: Tag not found
        '400':
          description: '`name` or `tags` must be sent'
    delete:
      summary: Delete product
      tags:
      - product
      operationId: deleteProduct
      parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Product deleted with success
        '404':
          description: Product not found

  /products/{productId}/tags:
    post:
      summary: Add product tags
      tags:
      - product
      operationId: addProductTags
      parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        '204':
          description: Add product tags with success
        '400':
          description: Tag not found
    get:
      summary: Get product tags
      tags:
      - product
      operationId: addProductTag
      parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Get product tags with success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /products/{productId}/tags/{tagId}:
    delete:
      summary: Remove product tag
      tags:
      - product
      operationId: removeProductTag
      parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
          format: uuid
      - in: path
        name: tagId
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Product tag removed with success
        '404':
          description: Product or Product tag not found
  /tags:
    get:
      tags:
      - tag
      summary: List tags
      operationId: listTags
      responses:
        '200':
          description: List tags with success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
    post:
      description: Tag is sanitized (to lower, remove all accentuation and trimmed) before be saved.
      summary: Create a new tag
      tags:
      - tag
      operationId: createTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Tag created with success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '409':
          description: Tag name alread exists
  /tags/{tagId}:
    delete:
      summary: Delete tag
      tags:
      - tag
      operationId: deleteTag
      parameters:
      - in: path
        name: tagId
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Tag deleted with success
        '404':
          description: Tag not found
    put:
      description: Tag is sanitized (to lower, remove all accentuation and trimmed) before be saved.
      summary: Update tag
      tags:
      - tag
      operationId: updateTag
      parameters:
      - in: path
        name: tagId
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Tag updated with success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: Tag not found
        '409':
          description: Tag name alread exists
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Zomo de Morango
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tags:
          description: unique values in lower case
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          description: unique values in lower case and without accentuation
          type: string
          example: Zomo de Morango
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
